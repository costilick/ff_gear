super_user = User.super_user
super_user.update_token(access_token: token)
super_user.update_token(access_token: token).to_sql
super_user.update(access_token: "")
super_user.update(access_token: token)
super_user.update_column(access_token: token)
token = "phong"
super_user.update_columns(access_token: token)
params[:user][:access_token]
params = {"utf8"=>"âœ“", "user"=>{"access_token"=>"ahihi"}, "button"=>""}
params.class
params[:user]
params["user"]
User.super_user.password
User.super_user
User
User.super_user.encrypted_password
pass = "!Ilovedhhsomuc"
pass = "!Ilovedhhsomuch"
Digest::MD5.hexdigest(pass)
super_user.pass = pass
super_user.password = pass
super_user.valid_password?
pass = "!@IloveyouOk"
super_user.valid_password?(pass)
APP_CONFIG['admin_access_token']
30.seconds
30.seconds.from_now
Commontator::Comment
Commontator::Comment.last(20).deelete
Commontator::Comment.last(20).delete
Commontator::Comment.last(20).delete_all
Commontator::Comment.last(20)
Commontator::Comment.limit(20)
Commontator::Comment.order(id: :desc).limit(20).delete_all
Commontator::Comment.order(id: :desc).limit(20)
Commontator::Comment.order(id: :desc).limit(20).class
Commontator::Comment.order(id: :desc).limit(20).destroy_all
1.hour
1.hour.from_now
Visit
Visit.where(user: User.find(2))
Visit.where(user: User.find(2), date: Date.today).first_or_create
Visit.where(user: User.find(2), visited_at: Date.today)
Visit.find_or_create(user: User.find(2), visited_at: Date.today)
Visit.first_or_create_by(user: User.find(2), visited_at: Date.today)
Visit.first_or_create(user: User.find(2), visited_at: Date.today)
Visit.all
Visit.count
Visit.group(:id, :visited_at)
Visit.group(:visited_at).count(:id)
7.days.ago < Date.today
7.days.ago > Date.today
Visit.where("visited_at > ?", 7.days.ago)
recently_visited = Visit.where("visited_at > ?", 7.days.ago)
recently_visited.group(:visited_at)
recently_visited.group(:visited_at).count(:id)
recently_visited.group(:visited_at).count(:id)..map { |label, data| [label.strftime('%d/%m'), data.size] }
recently_visited.group(:visited_at).count(:id).map { |label, data| [label.strftime('%d/%m'), data.size] }
recently_visited.group(:visited_at).count(:id).map { |label, data| [label.strftime('%d/%m'), data] }
2.size
5.times { Visit.create(user: User.pluck(:id)[rand(10)], date: Date.today) }
Visit.create(user: User.pluck(:id)[rand(10)], date: Date.today)
User.pluck(:id)[rand(10)]
Visit.find_or_create(user: User.find(User.pluck(:id)[rand(10)]), date: Date.today)
Visit.find_or_create_by(user: User.find(User.pluck(:id)[rand(10)]), date: Date.today)
Visit.find_or_create_by(user: User.find(User.pluck(:id)[rand(10)]), visited_at: Date.today)
3.times { Visit.find_or_create_by(user: User.find(User.pluck(:id)[rand(10)]), visited_at: Date.today) }
5.times { Visit.find_or_create_by(user: User.find(User.pluck(:id)[rand(10)]), visited_at: Date.yesterday) }
5.times { Visit.find_or_create_by(user: User.find(User.pluck(:id)[rand(10)]), visited_at: 1.day.ago) }
5.times { Visit.find_or_create_by(user: User.find(User.pluck(:id)[rand(10)]), visited_at: 2.day.ago) }
5.times { Visit.find_or_create_by(user: User.find(User.pluck(:id)[rand(10)]), visited_at: 3.day.ago) }
5.times { Visit.find_or_create_by(user: User.find(User.pluck(:id)[rand(10)]), visited_at: 5.day.ago) }
5.times { Visit.find_or_create_by(user: User.find(User.pluck(:id)[rand(10)]), visited_at: 7.day.ago) }
5.times { Visit.find_or_create_by(user: User.find(User.pluck(:id)[rand(10)]), visited_at: 6.day.ago) }
5.times { Visit.find_or_create_by(user: User.find(User.pluck(:id)[rand(10)]), visited_at: 4.day.ago) }
User.last
Time.now
(rand(7)).days.
;
(rand(7) + ).days.ago
(rand(7) + 1).days.ago
Post.update_all(created_at: (rand(7) + 1).days.ago)
Post.all.each { |p| p.update(created_at: (rand(7) + 1).days.ago) 
2.days.from_now
2.days.ago.from_now
Category.count
reload!
APP_CONFIG['facebook_app_id']
APP_CONFIG = YAML.load_file(Rails.root.join("config/settings.yml"))[Rails.env]
APP_CONFIG = YAML.load_file(Rails.root.join("config/settings.yml"))['test']
APP_CONFIG = YAML.load_file(Rails.root.join("config/settings.yml"))['production']
ENV = APP_CONFIG.dup
ENV["FB_APP_ID"] = "zxcvbnm"
APP_CONFIG.each {|k, v| APP_CONFIG[key] = ENV[value] }
APP_CONFIG.each {|k, v| APP_CONFIG[key] = ENV[key] }
APP_CONFIG.each {|k, v| APP_CONFIG[k] = ENV[k] }
APP_CONFIG.each {|k, v| v = ENV[k] }
APP_CONFIG
exit
